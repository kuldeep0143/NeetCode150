1 Brute Force TC => O(n2) && SC => O(1)
public class Solution {
    public boolean hasDuplicate(int[] nums) {
        for (int i = 0; i < nums.length; i++) {
            for (int j = i + 1; j < nums.length; j++) {
                if (nums[i] == nums[j]) {
                    return true;
                }
            }
        }
        return false;
    }
}

2. Sorting TC =  O (nlogn) && SC => O (1)
class Solution {
    public boolean containsDuplicate(int[] nums) {
      Arrays.sort(nums);
      for(int i =1;i<nums.length;i++) {
        if(nums[i] == nums[i-1]) {
            return true;
        }
      }
      return false;
    }
}

3.  HashSet TC => O(n) && SC => O(n)
public class Solution {
    public boolean hasDuplicate(int[] nums) {
        Set<Integer> seen = new HashSet<>();
        for (int num : nums) {
            if (seen.contains(num)) {
                return true;
            }
            seen.add(num);
        }
        return false;
    }
}
