1. Sorting   TC => O(nlogn + mlogm) && SC => O(1) or O (m+n)

public class Solution {
    public boolean isAnagram(String s, String t) {
        if (s.length() != t.length()) {
            return false;
        }

        char[] sSort = s.toCharArray();
        char[] tSort = t.toCharArray();
        Arrays.sort(sSort);
        Arrays.sort(tSort);
        return Arrays.equals(sSort, tSort);
    }

}

2. HashMap   TC=> O(n+m) && SC => O(1)  since we have at most 26 different characters.

class Solution {
    public boolean isAnagram(String s, String t) {
        if(s.length() != t.length()) return false;

        HashMap<Character, Integer> sCount = new HashMap<>();
        HashMap<Character, Integer > tCount = new HashMap<>();

        for(int i = 0;i<s.length();i++) {
            sCount.put(s.charAt(i), sCount.getOrDefault(s.charAt(i),0)+1);
            tCount.put(t.charAt(i), tCount.getOrDefault(t.charAt(i),0)+1);
        }
        return sCount.equals(tCount);
}
}

3. Hash Table (Using Array)   TC=> O(n+m) && SC => O(1)  since we have at most 26 different characters.

public class Solution {
    public boolean isAnagram(String s, String t) {
        if (s.length() != t.length()) {
            return false;
        }

        int[] count = new int[26];
        for (int i = 0; i < s.length(); i++) {
            count[s.charAt(i) - 'a']++;
            count[t.charAt(i) - 'a']--;
        }

        for (int val : count) {
            if (val != 0) {
                return false;
            }
        }
        return true;
    }
}

